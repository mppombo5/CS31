a) For the most part, this project was a breeze. The only (and significant) problems I faced were when it came to the subsequence and divide functions. These two functions took longer than the rest combined. I had my breakthrough for subsequence when I realized I should run j alongside i until it comes to a break. Divide was a bit more tricky: I knew I could do it without an array using a quicksort algorithm, but my knowledge on quicksort was limited to the few YouTube videos I had seen on them. I then realized I could divide them using the partition portion of a quicksort, and that part worked after I finally understood how to implement it. Putting the element that's equal to divider was tricky, but I figured that out in time too. My last hurdle, though, was finding where I was searching for elements out of bounds of the array for divide – turns out I had to make sure my index wasn't greater than n.

b) I don't have every case I used to test my functions, but I have the code that I wrote to be able to test each function thoroughly, which I will put below. Here, though, I have assert cases (mostly divide) that I used to test them – the biggest concern for me was reaching out of bounds of the array, which is what happened to me last project.

string h[7] = { "greg", "gavin", "ed", "xavier", "", "eleni", "fiona" };
string h1[7] = { "greg", "gavin", "ed", "fiona", "", "eleni", "xavier" };
string g[4] = { "greg", "gavin", "fiona", "kevin" };
string e[4] = { "ed", "fiona", "", "xavier" };
string e1[4] = { "fiona", "", "eleni", "xavier" };
string d[5] = { "gavin", "gavin", "gavin", "xavier", "eleni" };
string d1[5] = { "gavin", "gavin", "gavin", "xavier", "xavier" };
string f[3] = { "fiona", "ed", "john" };

assert(lookup(h, 7, "fiona") == 6);
assert(positionOfMax(h1, 7) == 6);
assert(differ(h, 7, h1, 7) == 3);
assert(subsequence(h1, 7, e1, 4) == 3);
assert(countRuns(d1, 5) == 2);

string arr2[9] = {
        "forgery", "georgia", "heist", "icarus", "crapple", "ape", "bonjour", "denim", "effervescent"
};

assert(divide(arr2, 9, "z") == 9);
assert(divide(arr2, 9, "crapple") == 2);
assert(divide(arr2, 9, "denim") == 3);
assert(divide(arr2, 9, "a") == 0);
assert(divide(arr2, 9, "ape") == 0);
assert(divide(arr2, 9, "icarus") == 8);

And here is the code I wrote for each function to test them thoroughly, before I thought to use assert cases:

string arr[9] = {
            "ape", "bonjour", "crapple", "heist", "georgia", "forgery", "effervescent", "denim", "icarus"
    };

string arr2[9] = {
            "ape", "bonjour", "crapple", "crapple", "georgia", "forgery", "effervescent", "denim", "icarus"
    };

=======================================================

appendToAll:

string s;
    cout << "What string would you like to add on? ";
    getline(cin, s);

    int n;
    cout << "Up to what position would you like to append this string? ";
    cin >> n;

    appendToAll(arr, n, s);

    for (int i = 0; i < 9; i++) {
        cout << arr[i] << endl;
    }

=======================================================

lookup:

string s;
    cout << "What string would you like to look for? ";
    getline(cin, s);

    int n;
    cout << "Up to which position would you like to check? ";
    cin >> n;
    n++;

    int pos = lookup(arr, n, s);

    if (pos == -1) {
        cout << "lookup returns -1.\n";
        return 0;
    }
    cout << '"' << arr[pos] << '"' << " is located at arr[" << pos << "].\n";

======================================================

positionOfMax:

int n;
    cout << "Up to what position would you like to search for the highest value string? ";
    cin >> n;

    if (positionOfMax(arr, n) == -1) {
        cout << "positionOfMax returns -1.\n";
        return 0;
    }
    cout << "Position of max string is " << arr[positionOfMax(arr, n)] << " at arr[" << positionOfMax(arr, n) << "].\n";

======================================================

rotateLeft:

int n;
    cout << "What position would you like to be the back? ";
    cin >> n;

    int m;
    cout << "What position would you like to move to the back? ";
    cin >> m;

    int q = rotateLeft(arr, n, m);

    for (int i = 0; i < 9; i++) {
        cout << arr[i] << endl;
    }

======================================================

countRuns:

int n;
    cout << "Up to which position would you like to check for runs? ";
    cin >> n;

    int p = countRuns(arr2, n);

    cout << "countRuns returns " << p << ".\n";

======================================================

flip:

int n;
    cout << "How many values would you like to flip? ";
    cin >> n;

    int q = flip(arr, n);
    for (int i = 0; i < 9; i++) {
        cout << arr[i] << endl;
    }

    cout << endl << "flip returns " << q << ".\n";

======================================================

differ:

string arr1[9] = {
            "ape", "bonjour", "crapple", "heist", "georgia", "forgery", "alphabet", "denim", "butts"
    };

    string arr2[9] = {
            "ape", "bonjour", "crapple", "heist", "georgia", "forgery", "alphabet", "denim", "icarus"
    };

    int n;
    cout << "Up to which value in the first string would you like to check for differences?\n";
    cin >> n;

    int m;
    cout << "Up to which value in the second string would you like to check for differences?\n";
    cin >> m;

    int q = differ(arr1, n, arr2, m);

    if (q == -1) {
        cout << "differ returns -1.\n";
        return 0;
    }

    cout << "differ returns value " << q << ".\n";

=====================================================

int n;
    cout << "How many elements of arr do you want to check? ";
    cin >> n;

    int m;
    cout << "How many elements of arr2 do you want to compare? ";
    cin >> m;

    int q = subsequence(arr, n, arr2, m);

    if (q == -1) {
        cout << "subsequence returns -1.\n";
        return 0;
    }

    cout << "subsequence returns " << q << ".\n" << "That corresponds to " << arr[q] << " in the array.\n";

=====================================================

divide:

int n;
    cout << "How many elements of arr would you like to divide? ";
    cin >> n;

    cin.ignore(10000, '\n');

    string s;
    cout << "What string would you like to be your divider? ";
    getline(cin, s);

    int q = divide(arr, n, s);

    if (q == -1) {
        cout << "divide returns -1.\n";
        return 0;
    }
    cout << "divide returns value " << q << ".\n";

    for (int i = 0; i < n; i++) {
        cout << arr[i] << endl;
    }